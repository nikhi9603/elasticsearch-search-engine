{
    "url": "https://en.wikipedia.org/wiki/Perceptron",
    "title": "Perceptron",
    "table_of_contents": [
        "1 History",
        "2 Definition",
        "3 Learning algorithm",
        "3.1 Definitions",
        "3.2 Steps",
        "3.3 Convergence",
        "4 Variants",
        "5 Multiclass perceptron",
        "6 References",
        "7 Further reading",
        "8 External links"
    ],
    "paragraphs": [
        {
            "title": "",
            "text": "In machine learning, the perceptron (or McCulloch-Pitts neuron) is an algorithm for supervised learning of binary classifiers.  A binary classifier is a function which can decide whether or not an input, represented by a vector of numbers, belongs to some specific class.[1]  It is a type of linear classifier, i.e. a classification algorithm that makes its predictions based on a linear predictor function combining a set of weights with the feature vector.\n\n"
        },
        {
            "title": "History",
            "text": "The perceptron was invented in 1943 by McCulloch and Pitts.[3] The first implementation was a machine built in 1958 at the Cornell Aeronautical Laboratory by Frank Rosenblatt,[4] funded by the United States Office of Naval Research.[5]\n\nThe perceptron was intended to be a machine, rather than a program, and while its first implementation was in software for the IBM 704, it was subsequently implemented in custom-built hardware as the \"Mark 1 perceptron\". This machine was designed for image recognition: it had an array of 400 photocells, randomly connected to the \"neurons\". Weights were encoded in potentiometers, and weight updates during learning were performed by electric motors.[2]: 193 \n\nIn a 1958 press conference organized by the US Navy, Rosenblatt made statements about the perceptron that caused a heated controversy among the fledgling AI community; based on Rosenblatt's statements, The New York Times reported the perceptron to be \"the embryo of an electronic computer that [the Navy] expects will be able to walk, talk, see, write, reproduce itself and be conscious of its existence.\"[5]\n\nAlthough the perceptron initially seemed promising, it was quickly proved that perceptrons could not be trained to recognise many classes of patterns. This caused the field of neural network research to stagnate for many years, before it was recognised that a feedforward neural network with two or more layers (also called a multilayer perceptron) had greater processing power than perceptrons with one layer (also called a single-layer perceptron).\n\nSingle-layer perceptrons are only capable of learning linearly separable patterns. For a classification task with some step activation function, a single node will have a single line dividing the data points forming the patterns. More nodes can create more dividing lines, but those lines must somehow be combined to form more complex classifications. A second layer of perceptrons, or even linear nodes, are sufficient to solve a lot of otherwise non-separable problems.\n\nIn 1969, a famous book entitled Perceptrons by Marvin Minsky and Seymour Papert showed that it was impossible for these classes of network to learn an XOR function. It is often believed (incorrectly) that they also conjectured that a similar result would hold for a multi-layer perceptron network. However, this is not true, as both Minsky and Papert already knew that multi-layer perceptrons were capable of producing an XOR function. (See the page on Perceptrons (book) for more information.)  Nevertheless, the often-miscited Minsky/Papert text caused a significant decline in interest and funding of neural network research. It took ten more years until neural network research experienced a resurgence in the 1980s.  This text was reprinted in 1987 as \"Perceptrons - Expanded Edition\" where some errors in the original text are shown and corrected.\n\nA 2022 article states that the Mark 1 Perceptron was \"part of a previously secret four-year NPIC [the US' National Photographic Interpretation Center] effort from 1963 through 1966 to develop this algorithm into a useful tool for photo-interpreters\".[6]\n\nThe kernel perceptron algorithm was already introduced in 1964 by Aizerman et al.[7] Margin bounds guarantees were given for the Perceptron algorithm in the general non-separable case first by Freund and Schapire (1998),[1] and more recently by Mohri and Rostamizadeh (2013) who extend previous results and give new L1 bounds.[8]\n\nThe perceptron is a simplified model of a biological neuron. While the complexity of biological neuron models is often required to fully understand neural behavior, research suggests a perceptron-like linear model can produce some behavior seen in real neurons.[9]\n\n"
        },
        {
            "title": "Definition",
            "text": "In the modern sense, the perceptron is an algorithm for learning a binary classifier called a threshold function: a function that maps its input \n\n\n\n\nx\n\n\n\n{\\displaystyle \\mathbf {x} }\n\n (a real-valued vector) to an output value \n\n\n\nf\n(\n\nx\n\n)\n\n\n{\\displaystyle f(\\mathbf {x} )}\n\n (a single binary value):\n\nwhere \n\n\n\n\nw\n\n\n\n{\\displaystyle \\mathbf {w} }\n\n is a vector of real-valued weights, \n\n\n\n\nw\n\n⋅\n\nx\n\n\n\n{\\displaystyle \\mathbf {w} \\cdot \\mathbf {x} }\n\n is the dot product \n\n\n\n\n∑\n\ni\n=\n1\n\n\nm\n\n\n\nw\n\ni\n\n\n\nx\n\ni\n\n\n\n\n{\\displaystyle \\sum _{i=1}^{m}w_{i}x_{i}}\n\n, where m is the number of inputs to the perceptron, and b is the bias. The bias shifts the decision boundary away from the origin and does not depend on any input value.\n\nThe value of \n\n\n\nf\n(\n\nx\n\n)\n\n\n{\\displaystyle f(\\mathbf {x} )}\n\n (0 or 1) is used to classify \n\n\n\n\nx\n\n\n\n{\\displaystyle \\mathbf {x} }\n\n as either a positive or a negative instance, in the case of a binary classification problem. If b is negative, then the weighted combination of inputs must produce a positive value greater than \n\n\n\n\n|\n\nb\n\n|\n\n\n\n{\\displaystyle |b|}\n\n in order to push the classifier neuron over the 0 threshold. Spatially, the bias alters the position (though not the orientation) of the decision boundary. The perceptron learning algorithm does not terminate if the learning set is not linearly separable. If the vectors are not linearly separable learning will never reach a point where all vectors are classified properly. The most famous example of the perceptron's inability to solve problems with linearly nonseparable vectors is the Boolean exclusive-or problem. The solution spaces of decision boundaries for all binary functions and learning behaviors are studied in the reference.[10]\n\nIn the context of neural networks, a perceptron is an artificial neuron using the Heaviside step function as the activation function. The perceptron algorithm is also termed the single-layer perceptron, to distinguish it from a multilayer perceptron, which is a misnomer for a more complicated neural network.  As a linear classifier, the single-layer perceptron is the simplest feedforward neural network.\n\n"
        },
        {
            "title": "Learning algorithm",
            "text": "Below is an example of a learning algorithm for a single-layer perceptron. For multilayer perceptrons, where a hidden layer exists, more sophisticated algorithms such as backpropagation must be used. If the activation function or the underlying process being modeled by the perceptron is nonlinear, alternative learning algorithms such as the delta rule can be used as long as the activation function is differentiable. Nonetheless, the learning algorithm described in the steps below will often work, even for multilayer perceptrons with nonlinear activation functions.\n\nWhen multiple perceptrons are combined in an artificial neural network, each output neuron operates independently of all the others; thus, learning each output can be considered in isolation.\n\n\n\nWe first define some variables:\n\nWe show the values of the features as follows:\n\nTo represent the weights: \n\nTo show the time-dependence of \n\n\n\n\nw\n\n\n\n{\\displaystyle \\mathbf {w} }\n\n, we use:\n\n\n\nThe algorithm updates the weights after steps 2a and 2b. These weights are immediately applied to a pair in the training set, and subsequently updated, rather than waiting until all pairs in the training set have undergone these steps.\n\nThe perceptron is a linear classifier, therefore it will never get to the state with all the input vectors classified correctly if the training set D is not linearly separable, i.e. if the positive examples cannot be separated from the negative examples by a hyperplane. In this case, no \"approximate\" solution will be gradually approached under the standard learning algorithm, but instead, learning will fail completely. Hence, if linear separability of the training set is not known a priori, one of the training variants below should be used.\n\nIf the training set is linearly separable, then the perceptron is guaranteed to converge.[11] Furthermore, there is an upper bound on the number of times the perceptron will adjust its weights during the training.\n\nSuppose that the input vectors from the two classes can be separated by a hyperplane with a margin \n\n\n\nγ\n\n\n{\\displaystyle \\gamma }\n\n, i.e. there exists a weight vector \n\n\n\n\nw\n\n,\n\n|\n\n\n|\n\n\nw\n\n\n|\n\n\n|\n\n=\n1\n\n\n{\\displaystyle \\mathbf {w} ,||\\mathbf {w} ||=1}\n\n, and a bias term b such that \n\n\n\n\nw\n\n⋅\n\n\nx\n\n\nj\n\n\n>\nγ\n\n\n{\\displaystyle \\mathbf {w} \\cdot \\mathbf {x} _{j}>\\gamma }\n\n for all \n\n\n\nj\n\n\n{\\displaystyle j}\n\n with \n\n\n\n\nd\n\nj\n\n\n=\n1\n\n\n{\\displaystyle d_{j}=1}\n\n and \n\n\n\n\nw\n\n⋅\n\n\nx\n\n\nj\n\n\n<\n−\nγ\n\n\n{\\displaystyle \\mathbf {w} \\cdot \\mathbf {x} _{j}<-\\gamma }\n\n for all \n\n\n\nj\n\n\n{\\displaystyle j}\n\n with \n\n\n\n\nd\n\nj\n\n\n=\n0\n\n\n{\\displaystyle d_{j}=0}\n\n, where \n\n\n\n\nd\n\nj\n\n\n\n\n{\\displaystyle d_{j}}\n\n is the desired output value of the perceptron for input \n\n\n\nj\n\n\n{\\displaystyle j}\n\n. Also, let R denote the maximum norm of an input vector. Novikoff (1962) proved that in this case the perceptron algorithm converges after making \n\n\n\nO\n(\n\nR\n\n2\n\n\n\n/\n\n\nγ\n\n2\n\n\n)\n\n\n{\\displaystyle O(R^{2}/\\gamma ^{2})}\n\n updates. The idea of the proof is that the weight vector is always adjusted by a bounded amount in a direction with which it has a negative dot product, and thus can be bounded above by O(√t), where t is the number of changes to the weight vector. However, it can also be bounded below by O(t) because if there exists an (unknown) satisfactory weight vector, then every change makes progress in this (unknown) direction by a positive amount that depends only on the input vector.\n\nWhile the perceptron algorithm is guaranteed to converge on some solution in the case of a linearly separable training set, it may still pick any solution and problems may admit many solutions of varying quality.[12] The perceptron of optimal stability, nowadays better known as the linear support-vector machine, was designed to solve this problem (Krauth and Mezard, 1987).[13]\n\n"
        },
        {
            "title": "Variants",
            "text": "The pocket algorithm with ratchet (Gallant, 1990) solves the stability problem of perceptron learning by keeping the best solution seen so far \"in its pocket\". The pocket algorithm then returns the solution in the pocket, rather than the last solution. It can be used also for non-separable data sets, where the aim is to find a perceptron with a small number of misclassifications. However, these solutions appear purely stochastically and hence the pocket algorithm neither approaches them gradually in the course of learning, nor are they guaranteed to show up within a given number of learning steps.\n\nThe Maxover algorithm (Wendemuth, 1995) is \"robust\" in the sense that it will converge regardless of (prior) knowledge of linear separability of the data set.[14] In the linearly separable case, it will solve the training problem – if desired, even with optimal stability (maximum margin between the classes). For non-separable data sets, it will return a solution with a small number of misclassifications. In all cases, the algorithm gradually approaches the solution in the course of learning, without memorizing previous states and without stochastic jumps. Convergence is to global optimality for separable data sets and to local optimality for non-separable data sets.\n\nThe Voted Perceptron (Freund and Schapire, 1999), is a variant using multiple weighted perceptrons. The algorithm starts a new perceptron every time an example is wrongly classified, initializing the weights vector with the final weights of the last perceptron. Each perceptron will also be given another weight corresponding to how many examples do they correctly classify before wrongly classifying one, and at the end the output will be a weighted vote on all perceptrons.\n\nIn separable problems, perceptron training can also aim at finding the largest separating margin between the classes. The so-called perceptron of optimal stability can be determined by means of iterative training and optimization schemes, such as the Min-Over algorithm (Krauth and Mezard, 1987)[13]  or the AdaTron (Anlauf and Biehl, 1989)).[15] AdaTron uses the fact that the corresponding quadratic optimization problem is convex. The perceptron of optimal stability, together with the kernel trick, are the conceptual foundations of the support-vector machine.\n\nThe \n\n\n\nα\n\n\n{\\displaystyle \\alpha }\n\n-perceptron further used a pre-processing layer of fixed random weights, with thresholded output units. This enabled the perceptron to classify analogue patterns, by projecting them into a binary space. In fact, for a projection space of sufficiently high dimension, patterns can become linearly separable.\n\nAnother way to solve nonlinear problems without using multiple layers is to use higher order networks (sigma-pi unit). In this type of network, each element in the input vector is extended with each pairwise combination of multiplied inputs (second order). This can be extended to an n-order network.\n\nIt should be kept in mind, however, that the best classifier is not necessarily that which classifies all the training data perfectly. Indeed, if we had the prior constraint that the data come from equi-variant Gaussian distributions, the linear separation in the input space is optimal, and the nonlinear solution is overfitted.\n\nOther linear classification algorithms include Winnow, support-vector machine, and logistic regression.\n\n"
        },
        {
            "title": "Multiclass perceptron",
            "text": "Like most other techniques for training linear classifiers, the perceptron generalizes naturally to multiclass classification.  Here, the input \n\n\n\nx\n\n\n{\\displaystyle x}\n\n and the output \n\n\n\ny\n\n\n{\\displaystyle y}\n\n are drawn from arbitrary sets. A feature representation function \n\n\n\nf\n(\nx\n,\ny\n)\n\n\n{\\displaystyle f(x,y)}\n\n maps each possible input/output pair to a finite-dimensional real-valued feature vector.  As before, the feature vector is multiplied by a weight vector \n\n\n\nw\n\n\n{\\displaystyle w}\n\n, but now the resulting score is used to choose among many possible outputs:\n\nLearning again iterates over the examples, predicting an output for each, leaving the weights unchanged when the predicted output matches the target, and changing them when it does not.  The update becomes:\n\nThis multiclass feedback formulation reduces to the original perceptron when \n\n\n\nx\n\n\n{\\displaystyle x}\n\n is a real-valued vector, \n\n\n\ny\n\n\n{\\displaystyle y}\n\n is chosen from \n\n\n\n{\n0\n,\n1\n}\n\n\n{\\displaystyle \\{0,1\\}}\n\n, and \n\n\n\nf\n(\nx\n,\ny\n)\n=\ny\nx\n\n\n{\\displaystyle f(x,y)=yx}\n\n.\n\nFor certain problems, input/output representations and features can be chosen so that \n\n\n\n\n\na\nr\ng\nm\na\nx\n\n\ny\n\n\nf\n(\nx\n,\ny\n)\n⋅\nw\n\n\n{\\displaystyle \\mathrm {argmax} _{y}f(x,y)\\cdot w}\n\n can be found efficiently even though \n\n\n\ny\n\n\n{\\displaystyle y}\n\n is chosen from a very large or even infinite set.\n\nSince 2002, perceptron training has become popular in the field of natural language processing for such tasks as part-of-speech tagging and syntactic parsing (Collins, 2002). It has also been applied to large-scale machine learning problems in a distributed computing setting.[16]\n\n"
        }
    ],
    "links": [
        "https://en.wikipedia.org/wiki/Machine_learning",
        "https://en.wikipedia.org/wiki/Data_mining",
        "https://en.wikipedia.org/wiki/Statistical_classification",
        "https://en.wikipedia.org/wiki/Regression_analysis",
        "https://en.wikipedia.org/wiki/Cluster_analysis",
        "https://en.wikipedia.org/wiki/Dimensionality_reduction",
        "https://en.wikipedia.org/wiki/Density_estimation",
        "https://en.wikipedia.org/wiki/Anomaly_detection",
        "https://en.wikipedia.org/wiki/Data_Cleaning",
        "https://en.wikipedia.org/wiki/Automated_machine_learning",
        "https://en.wikipedia.org/wiki/Association_rule_learning",
        "https://en.wikipedia.org/wiki/Structured_prediction",
        "https://en.wikipedia.org/wiki/Feature_engineering",
        "https://en.wikipedia.org/wiki/Feature_learning",
        "https://en.wikipedia.org/wiki/Online_machine_learning",
        "https://en.wikipedia.org/wiki/Reinforcement_learning",
        "https://en.wikipedia.org/wiki/Supervised_learning",
        "https://en.wikipedia.org/wiki/Unsupervised_learning",
        "https://en.wikipedia.org/wiki/Learning_to_rank",
        "https://en.wikipedia.org/wiki/Grammar_induction",
        "https://en.wikipedia.org/wiki/Supervised_learning",
        "https://en.wikipedia.org/wiki/Statistical_classification",
        "https://en.wikipedia.org/wiki/Regression_analysis",
        "https://en.wikipedia.org/wiki/Decision_tree_learning",
        "https://en.wikipedia.org/wiki/Ensemble_learning",
        "https://en.wikipedia.org/wiki/Bootstrap_aggregating",
        "https://en.wikipedia.org/wiki/Random_forest",
        "https://en.wikipedia.org/wiki/Linear_regression",
        "https://en.wikipedia.org/wiki/Naive_Bayes_classifier",
        "https://en.wikipedia.org/wiki/Artificial_neural_network",
        "https://en.wikipedia.org/wiki/Logistic_regression",
        "https://en.wikipedia.org/wiki/Relevance_vector_machine",
        "https://en.wikipedia.org/wiki/Cluster_analysis",
        "https://en.wikipedia.org/wiki/BIRCH",
        "https://en.wikipedia.org/wiki/CURE_algorithm",
        "https://en.wikipedia.org/wiki/Hierarchical_clustering",
        "https://en.wikipedia.org/wiki/Fuzzy_clustering",
        "https://en.wikipedia.org/wiki/DBSCAN",
        "https://en.wikipedia.org/wiki/OPTICS_algorithm",
        "https://en.wikipedia.org/wiki/Mean_shift",
        "https://en.wikipedia.org/wiki/Dimensionality_reduction",
        "https://en.wikipedia.org/wiki/Factor_analysis",
        "https://en.wikipedia.org/wiki/Canonical_correlation",
        "https://en.wikipedia.org/wiki/Independent_component_analysis",
        "https://en.wikipedia.org/wiki/Linear_discriminant_analysis",
        "https://en.wikipedia.org/wiki/Principal_component_analysis",
        "https://en.wikipedia.org/wiki/Proper_generalized_decomposition",
        "https://en.wikipedia.org/wiki/Sparse_dictionary_learning",
        "https://en.wikipedia.org/wiki/Structured_prediction",
        "https://en.wikipedia.org/wiki/Graphical_model",
        "https://en.wikipedia.org/wiki/Bayesian_network",
        "https://en.wikipedia.org/wiki/Conditional_random_field",
        "https://en.wikipedia.org/wiki/Hidden_Markov_model",
        "https://en.wikipedia.org/wiki/Anomaly_detection",
        "https://en.wikipedia.org/wiki/RANSAC",
        "https://en.wikipedia.org/wiki/Local_outlier_factor",
        "https://en.wikipedia.org/wiki/Isolation_forest",
        "https://en.wikipedia.org/wiki/Artificial_neural_network",
        "https://en.wikipedia.org/wiki/Autoencoder",
        "https://en.wikipedia.org/wiki/Cognitive_computing",
        "https://en.wikipedia.org/wiki/Deep_learning",
        "https://en.wikipedia.org/wiki/DeepDream",
        "https://en.wikipedia.org/wiki/Multilayer_perceptron",
        "https://en.wikipedia.org/wiki/Recurrent_neural_network",
        "https://en.wikipedia.org/wiki/Gated_recurrent_unit",
        "https://en.wikipedia.org/wiki/Echo_state_network",
        "https://en.wikipedia.org/wiki/Reservoir_computing",
        "https://en.wikipedia.org/wiki/Restricted_Boltzmann_machine",
        "https://en.wikipedia.org/wiki/Generative_adversarial_network",
        "https://en.wikipedia.org/wiki/Convolutional_neural_network",
        "https://en.wikipedia.org/wiki/Vision_transformer",
        "https://en.wikipedia.org/wiki/Spiking_neural_network",
        "https://en.wikipedia.org/wiki/Memtransistor",
        "https://en.wikipedia.org/wiki/Electrochemical_RAM",
        "https://en.wikipedia.org/wiki/Reinforcement_learning",
        "https://en.wikipedia.org/wiki/Temporal_difference_learning",
        "https://en.wikipedia.org/wiki/Crowdsourcing",
        "https://en.wikipedia.org/wiki/Kernel_machines",
        "https://en.wikipedia.org/wiki/Computational_learning_theory",
        "https://en.wikipedia.org/wiki/Empirical_risk_minimization",
        "https://en.wikipedia.org/wiki/Occam_learning",
        "https://en.wikipedia.org/wiki/Probably_approximately_correct_learning",
        "https://en.wikipedia.org/wiki/Statistical_learning_theory",
        "https://en.wikipedia.org/wiki/Conference_on_Neural_Information_Processing_Systems",
        "https://en.wikipedia.org/wiki/International_Conference_on_Machine_Learning",
        "https://en.wikipedia.org/wiki/International_Conference_on_Learning_Representations",
        "https://en.wikipedia.org/wiki/Journal_of_Machine_Learning_Research",
        "https://en.wikipedia.org/wiki/Glossary_of_artificial_intelligence",
        "https://en.wikipedia.org/wiki/Outline_of_machine_learning",
        "https://en.wikipedia.org/wiki/Machine_learning",
        "https://en.wikipedia.org/wiki/Supervised_classification",
        "https://en.wikipedia.org/wiki/Binary_classification",
        "https://en.wikipedia.org/wiki/Linear_classifier",
        "https://en.wikipedia.org/wiki/Linear_predictor_function",
        "https://en.wikipedia.org/wiki/Weighting",
        "https://en.wikipedia.org/wiki/Feature_vector",
        "https://en.wikipedia.org/wiki/Cadmium_sulfide",
        "https://en.wikipedia.org/wiki/Photocell",
        "https://en.wikipedia.org/wiki/Potentiometer",
        "https://en.wikipedia.org/wiki/Cornell_Aeronautical_Laboratory",
        "https://en.wikipedia.org/wiki/Frank_Rosenblatt",
        "https://en.wikipedia.org/wiki/Office_of_Naval_Research",
        "https://en.wikipedia.org/wiki/IBM_704",
        "https://en.wikipedia.org/wiki/Image_recognition",
        "https://en.wikipedia.org/wiki/Photocell",
        "https://en.wikipedia.org/wiki/Potentiometer",
        "https://en.wikipedia.org/wiki/Artificial_intelligence",
        "https://en.wikipedia.org/wiki/The_New_York_Times",
        "https://en.wikipedia.org/wiki/Feedforward_neural_network",
        "https://en.wikipedia.org/wiki/Multilayer_perceptron",
        "https://en.wikipedia.org/wiki/Linearly_separable",
        "https://en.wikipedia.org/wiki/Marvin_Minsky",
        "https://en.wikipedia.org/wiki/Seymour_Papert",
        "https://en.wikipedia.org/wiki/XOR",
        "https://en.wikipedia.org/wiki/Neural_network",
        "https://en.wikipedia.org/wiki/National_Photographic_Interpretation_Center",
        "https://en.wikipedia.org/wiki/Kernel_perceptron",
        "https://en.wikipedia.org/wiki/Yoav_Freund",
        "https://en.wikipedia.org/wiki/Robert_Schapire",
        "https://en.wikipedia.org/wiki/Mehryar_Mohri",
        "https://en.wikipedia.org/wiki/Neuron",
        "https://en.wikipedia.org/wiki/Biological_neuron_model",
        "https://en.wikipedia.org/wiki/Vector_space",
        "https://en.wikipedia.org/wiki/Binary_function",
        "https://en.wikipedia.org/wiki/Dot_product",
        "https://en.wikipedia.org/wiki/Decision_boundary",
        "https://en.wikipedia.org/wiki/Linearly_separable",
        "https://en.wikipedia.org/wiki/Artificial_neuron",
        "https://en.wikipedia.org/wiki/Heaviside_step_function",
        "https://en.wikipedia.org/wiki/Multilayer_perceptron",
        "https://en.wikipedia.org/wiki/Feedforward_neural_network",
        "https://en.wikipedia.org/wiki/Multilayer_perceptron",
        "https://en.wikipedia.org/wiki/Backpropagation",
        "https://en.wikipedia.org/wiki/Nonlinear_system",
        "https://en.wikipedia.org/wiki/Delta_rule",
        "https://en.wikipedia.org/wiki/Differentiable_function",
        "https://en.wikipedia.org/wiki/Learning_rate",
        "https://en.wikipedia.org/wiki/Offline_learning",
        "https://en.wikipedia.org/wiki/Linear_classifier",
        "https://en.wikipedia.org/wiki/Linearly_separable",
        "https://en.wikipedia.org/wiki/Dot_product",
        "https://en.wikipedia.org/wiki/Hyperplane_separation_theorem",
        "https://en.wikipedia.org/wiki/Kernel_trick",
        "https://en.wikipedia.org/wiki/Binary_Space_Partition",
        "https://en.wikipedia.org/wiki/Overfitting",
        "https://en.wikipedia.org/wiki/Logistic_regression",
        "https://en.wikipedia.org/wiki/Multiclass_classification",
        "https://en.wikipedia.org/wiki/Natural_language_processing",
        "https://en.wikipedia.org/wiki/Syntactic_parsing",
        "https://en.wikipedia.org/wiki/Distributed_computing",
        "https://en.wikipedia.org/wiki/Yoav_Freund",
        "https://en.wikipedia.org/wiki/Robert_Schapire",
        "https://en.wikipedia.org/wiki/Frank_Rosenblatt",
        "https://en.wikipedia.org/wiki/Frank_Rosenblatt",
        "https://en.wikipedia.org/wiki/Marvin_Minsky",
        "https://en.wikipedia.org/wiki/Bernard_Widrow",
        "https://en.wikipedia.org/wiki/Differentiable_function",
        "https://en.wikipedia.org/wiki/Differentiable_programming",
        "https://en.wikipedia.org/wiki/Information_geometry",
        "https://en.wikipedia.org/wiki/Statistical_manifold",
        "https://en.wikipedia.org/wiki/Automatic_differentiation",
        "https://en.wikipedia.org/wiki/Neuromorphic_engineering",
        "https://en.wikipedia.org/wiki/Cable_theory",
        "https://en.wikipedia.org/wiki/Pattern_recognition",
        "https://en.wikipedia.org/wiki/Tensor_calculus",
        "https://en.wikipedia.org/wiki/Computational_learning_theory",
        "https://en.wikipedia.org/wiki/Inductive_bias",
        "https://en.wikipedia.org/wiki/Gradient_descent",
        "https://en.wikipedia.org/wiki/Stochastic_gradient_descent",
        "https://en.wikipedia.org/wiki/Cluster_analysis",
        "https://en.wikipedia.org/wiki/Regression_analysis",
        "https://en.wikipedia.org/wiki/Overfitting",
        "https://en.wikipedia.org/wiki/Adversarial_machine_learning",
        "https://en.wikipedia.org/wiki/Convolution",
        "https://en.wikipedia.org/wiki/Loss_functions_for_classification",
        "https://en.wikipedia.org/wiki/Backpropagation",
        "https://en.wikipedia.org/wiki/Batch_normalization",
        "https://en.wikipedia.org/wiki/Activation_function",
        "https://en.wikipedia.org/wiki/Softmax_function",
        "https://en.wikipedia.org/wiki/Sigmoid_function",
        "https://en.wikipedia.org/wiki/Data_augmentation",
        "https://en.wikipedia.org/wiki/Diffusion_process",
        "https://en.wikipedia.org/wiki/Autoregressive_model",
        "https://en.wikipedia.org/wiki/Machine_learning",
        "https://en.wikipedia.org/wiki/Artificial_neural_network",
        "https://en.wikipedia.org/wiki/Deep_learning",
        "https://en.wikipedia.org/wiki/Computational_science",
        "https://en.wikipedia.org/wiki/Artificial_intelligence",
        "https://en.wikipedia.org/wiki/Graphcore",
        "https://en.wikipedia.org/wiki/Tensor_Processing_Unit",
        "https://en.wikipedia.org/wiki/Vision_processing_unit",
        "https://en.wikipedia.org/wiki/Memristor",
        "https://en.wikipedia.org/wiki/SpiNNaker",
        "https://en.wikipedia.org/wiki/TensorFlow",
        "https://en.wikipedia.org/wiki/PyTorch",
        "https://en.wikipedia.org/wiki/Keras",
        "https://en.wikipedia.org/wiki/Google_JAX",
        "https://en.wikipedia.org/wiki/AlexNet",
        "https://en.wikipedia.org/wiki/WaveNet",
        "https://en.wikipedia.org/wiki/Human_image_synthesis",
        "https://en.wikipedia.org/wiki/Handwriting_recognition",
        "https://en.wikipedia.org/wiki/Optical_character_recognition",
        "https://en.wikipedia.org/wiki/Deep_learning_speech_synthesis",
        "https://en.wikipedia.org/wiki/Speech_recognition",
        "https://en.wikipedia.org/wiki/Facial_recognition_system",
        "https://en.wikipedia.org/wiki/AlphaFold",
        "https://en.wikipedia.org/wiki/Word2vec",
        "https://en.wikipedia.org/wiki/LaMDA",
        "https://en.wikipedia.org/wiki/Neural_machine_translation",
        "https://en.wikipedia.org/wiki/Project_Debater",
        "https://en.wikipedia.org/wiki/IBM_Watson",
        "https://en.wikipedia.org/wiki/AlphaGo",
        "https://en.wikipedia.org/wiki/AlphaZero",
        "https://en.wikipedia.org/wiki/OpenAI_Five",
        "https://en.wikipedia.org/wiki/MuZero",
        "https://en.wikipedia.org/wiki/Action_selection",
        "https://en.wikipedia.org/wiki/Robot_control",
        "https://en.wikipedia.org/wiki/Yoshua_Bengio",
        "https://en.wikipedia.org/wiki/Ian_Goodfellow",
        "https://en.wikipedia.org/wiki/Demis_Hassabis",
        "https://en.wikipedia.org/wiki/Geoffrey_Hinton",
        "https://en.wikipedia.org/wiki/Yann_LeCun",
        "https://en.wikipedia.org/wiki/Andrew_Ng",
        "https://en.wikipedia.org/wiki/DeepMind",
        "https://en.wikipedia.org/wiki/OpenAI",
        "https://en.wikipedia.org/wiki/MIT_Computer_Science_and_Artificial_Intelligence_Laboratory",
        "https://en.wikipedia.org/wiki/Google_Brain",
        "https://en.wikipedia.org/wiki/Meta_AI",
        "https://en.wikipedia.org/wiki/Neural_Turing_machine",
        "https://en.wikipedia.org/wiki/Differentiable_neural_computer",
        "https://en.wikipedia.org/wiki/Recurrent_neural_network",
        "https://en.wikipedia.org/wiki/Gated_recurrent_unit",
        "https://en.wikipedia.org/wiki/Echo_state_network",
        "https://en.wikipedia.org/wiki/Multilayer_perceptron",
        "https://en.wikipedia.org/wiki/Convolutional_neural_network",
        "https://en.wikipedia.org/wiki/Residual_network",
        "https://en.wikipedia.org/wiki/Autoencoder",
        "https://en.wikipedia.org/wiki/Variational_autoencoder",
        "https://en.wikipedia.org/wiki/Generative_adversarial_network",
        "https://en.wikipedia.org/wiki/Graph_neural_network",
        "https://en.wikipedia.org/wiki/Perceptron",
        "https://en.wikipedia.org/wiki/Perceptron",
        "https://en.wikipedia.org/wiki/Main_Page",
        "https://en.wikipedia.org/wiki/Main_Page"
    ]
}