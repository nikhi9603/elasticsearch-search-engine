{
    "url": "https://en.wikipedia.org/wiki/Simultaneous_localization_and_mapping",
    "title": "Simultaneous localization and mapping",
    "table_of_contents": [
        "1 Mathematical description of the problem",
        "2 Algorithms",
        "2.1 Mapping",
        "2.2 Sensing",
        "2.3 Kinematics modeling",
        "2.4 Acoustic SLAM",
        "2.5 Audiovisual SLAM",
        "2.6 Collaborative SLAM",
        "2.7 Moving objects",
        "2.8 Loop closure",
        "2.9 Exploration",
        "2.10 Biological inspiration",
        "3 Implementation methods",
        "3.1 EKF SLAM",
        "3.2 GraphSLAM",
        "4 History",
        "5 See also",
        "6 References",
        "7 External links"
    ],
    "paragraphs": [
        {
            "title": "",
            "text": "Simultaneous localization and mapping (SLAM) is the computational problem of constructing or updating a map of an unknown environment while simultaneously keeping track of an agent's location within it. While this initially appears to be a chicken-and-egg problem, there are several algorithms known for solving it in, at least approximately, tractable time for certain environments. Popular approximate solution methods include the particle filter, extended Kalman filter, covariance intersection, and GraphSLAM. SLAM algorithms are based on concepts in computational geometry and computer vision, and are used in robot navigation, robotic mapping and odometry for virtual reality or augmented reality.\n\nSLAM algorithms are tailored to the available resources and are not aimed at perfection but at operational compliance. Published approaches are employed in self-driving cars, unmanned aerial vehicles, autonomous underwater vehicles, planetary rovers, newer domestic robots and even inside the human body.\n\n"
        },
        {
            "title": "Mathematical description of the problem",
            "text": "Given a series of controls \n\n\n\n\nu\n\nt\n\n\n\n\n{\\displaystyle u_{t}}\n\n and sensor observations \n\n\n\n\no\n\nt\n\n\n\n\n{\\displaystyle o_{t}}\n\n over discrete time steps \n\n\n\nt\n\n\n{\\displaystyle t}\n\n, the SLAM problem is to compute an estimate of the agent's state \n\n\n\n\nx\n\nt\n\n\n\n\n{\\displaystyle x_{t}}\n\n and a map of the environment \n\n\n\n\nm\n\nt\n\n\n\n\n{\\displaystyle m_{t}}\n\n. All quantities are usually probabilistic, so the objective is to compute:\n\nApplying Bayes' rule gives a framework for sequentially updating the location posteriors, given a map and a transition function \n\n\n\nP\n(\n\nx\n\nt\n\n\n\n|\n\n\nx\n\nt\n−\n1\n\n\n)\n\n\n{\\displaystyle P(x_{t}|x_{t-1})}\n\n,\n\nSimilarly the map can be updated sequentially by\n\nLike many inference problems, the solutions to inferring the two variables together can be found, to a local optimum solution, by alternating updates of the two beliefs in a form of an expectation–maximization algorithm.\n\n"
        },
        {
            "title": "Algorithms",
            "text": "Statistical techniques used to approximate the above equations include Kalman filters and particle filters. They provide an estimation of the posterior probability distribution for the pose of the robot and for the parameters of the map. Methods which conservatively approximate the above model using covariance intersection are able to avoid reliance on statistical independence assumptions to reduce algorithmic complexity for large-scale applications.[1] Other approximation methods achieve improved computational efficiency by using simple bounded-region representations of uncertainty.[2]\n\nSet-membership techniques are mainly based on interval constraint propagation.[3][4] \nThey provide a set which encloses the pose of the robot and a set approximation of the map. Bundle adjustment, and more generally Maximum a posteriori estimation (MAP), is another popular technique for SLAM using image data, which jointly estimates poses and landmark positions, increasing map fidelity, and is used in commercialized SLAM systems such as Google's ARCore which replaces their previous augmented reality project 'Tango'. MAP estimators compute the most likely explanation of the robot poses and the map given the sensor data, rather than trying to estimate the entire posterior probability.\n\nNew SLAM algorithms remain an active research area,[5] and are often driven by differing requirements and assumptions about the types of maps, sensors and models as detailed below. Many SLAM systems can be viewed as combinations of choices from each of these aspects.\n\nTopological maps are a method of environment representation which capture the connectivity (i.e., topology) of the environment rather than creating a geometrically accurate map. Topological SLAM approaches have been used to enforce global consistency in metric SLAM algorithms.[6]\n\nIn contrast, grid maps use arrays (typically square or hexagonal) of discretized cells to represent a topological world, and make inferences about which cells are occupied. Typically the cells are assumed to be statistically independent in order to simplify computation. Under such assumption, \n\n\n\nP\n(\n\nm\n\nt\n\n\n\n|\n\n\nx\n\nt\n\n\n,\n\nm\n\nt\n−\n1\n\n\n,\n\no\n\nt\n\n\n)\n\n\n{\\displaystyle P(m_{t}|x_{t},m_{t-1},o_{t})}\n\n are set to 1 if the new map's cells are consistent with the observation \n\n\n\n\no\n\nt\n\n\n\n\n{\\displaystyle o_{t}}\n\n at location \n\n\n\n\nx\n\nt\n\n\n\n\n{\\displaystyle x_{t}}\n\n and 0 if inconsistent.\n\nModern self driving cars mostly simplify the mapping problem to almost nothing, by making extensive use of highly detailed map data collected in advance.   This can include map annotations to the level of marking locations of individual white line segments and curbs on the road.   Location-tagged visual data such as Google's StreetView may also be used as part of maps.   Essentially such systems simplify the SLAM problem to a simpler localization only task, perhaps allowing for moving objects such as cars and people only to be updated in the map at runtime.\n\nSLAM will always use several different types of sensors, and the powers and limits of various sensor types have been a major driver of new algorithms.[7] Statistical independence is the mandatory requirement to cope with metric bias and with noise in measurements. Different types of sensors give rise to different SLAM algorithms whose assumptions are most appropriate to the sensors. At one extreme, laser scans or visual features provide details of many points within an area, sometimes rendering SLAM inference unnecessary because shapes in these point clouds can be easily and unambiguously aligned at each step via image registration. At the opposite extreme, tactile sensors are extremely sparse as they contain only information about points very close to the agent, so they require strong prior models to compensate in purely tactile SLAM. Most practical SLAM tasks fall somewhere between these visual and tactile extremes.\n\nSensor models divide broadly into landmark-based and raw-data approaches. Landmarks are uniquely identifiable objects in the world whose location can be estimated by a sensor—such as wifi access points or radio beacons. Raw-data approaches make no assumption that landmarks can be identified, and instead model \n\n\n\nP\n(\n\no\n\nt\n\n\n\n|\n\n\nx\n\nt\n\n\n)\n\n\n{\\displaystyle P(o_{t}|x_{t})}\n\n directly as a function of the location.\n\nOptical sensors may be one-dimensional (single beam) or 2D- (sweeping) laser rangefinders, 3D High Definition LiDAR, 3D Flash LIDAR, 2D or 3D sonar sensors and one or more 2D cameras.[7] Since 2005, there has been intense research into VSLAM (visual SLAM) using primarily visual (camera) sensors, because of the increasing ubiquity of cameras such as those in mobile devices.[8] Visual and Lidar sensors are informative enough to allow for landmark extraction in many cases. Other recent forms of SLAM include tactile SLAM[9] (sensing by local touch only), radar SLAM,[10] acoustic SLAM,[11] and wifi-SLAM (sensing by strengths of nearby wifi access points).[12] Recent approaches apply quasi-optical wireless ranging for multi-lateration (RTLS) or multi-angulation in conjunction with SLAM as a tribute to erratic wireless measures. A kind of SLAM for human pedestrians uses a shoe mounted inertial measurement unit as the main sensor and relies on the fact that pedestrians are able to avoid walls to automatically build floor plans of buildings by an indoor positioning system.[13]\n\nFor some outdoor applications, the need for SLAM has been almost entirely removed due to high precision differential GPS sensors. From a SLAM perspective, these may be viewed as location sensors whose likelihoods are so sharp that they completely dominate the inference. However, GPS sensors may occasionally decline or go down entirely, e.g. during times of military conflict, which are of particular interest to some robotics applications.\n\nThe \n\n\n\nP\n(\n\nx\n\nt\n\n\n\n|\n\n\nx\n\nt\n−\n1\n\n\n)\n\n\n{\\displaystyle P(x_{t}|x_{t-1})}\n\n term represents the kinematics of the model, which usually include information about action commands given to a robot. As a part of the model, the kinematics of the robot is included, to improve estimates of sensing under conditions of inherent and ambient noise. The dynamic model balances the contributions from various sensors, various partial error models and finally comprises in a sharp virtual depiction as a map with the location and heading of the robot as some cloud of probability. Mapping is the final depicting of such model, the map is either such depiction or the abstract term for the model.\n\nFor 2D robots, the kinematics are usually given by a mixture of rotation and \"move forward\" commands, which are implemented with additional motor noise. Unfortunately the distribution formed by independent noise in angular and linear directions is non-Gaussian, but is often approximated by a Gaussian. An alternative approach is to ignore the kinematic term and read odometry data from robot wheels after each command—such data may then be treated as one of the sensors rather than as kinematics.\n\nAn extension of the common SLAM problem has been applied to the acoustic domain, where environments are represented by the three-dimensional (3D) position of sound sources, termed.[14] Early implementations of this technique have utilized Direction-of-Arrival (DoA) estimates of the sound source location, and rely on principal techniques of Sound localization to determine source locations. An observer, or robot must be equipped with a microphone array to enable use of Acoustic SLAM, so that DoA features are properly estimated. Acoustic SLAM has paved foundations for further studies in acoustic scene mapping, and can play an important role in human-robot interaction through speech. In order to map multiple, and occasionally intermittent sound sources, an Acoustic SLAM system utilizes foundations in Random Finite Set theory to handle the varying presence of acoustic landmarks.[15] However, the nature of acoustically derived features leaves Acoustic SLAM susceptible to problems of reverberation, inactivity, and noise within an environment.\n\nOriginally designed for human–robot interaction, Audio-Visual SLAM is a framework that provides the fusion of landmark features obtained from both the acoustic and visual modalities within an environment.[16] Human interaction is characterized by features perceived in not only the visual modality, but the acoustic modality as well; as such, SLAM algorithms for human-centered robots and machines must account for both sets of features. An Audio-Visual framework estimates and maps positions of human landmarks through use of visual features like human pose, and audio features like human speech, and fuses the beliefs for a more robust map of the environment. For applications in mobile robotics (ex. drones, service robots), it is valuable to use low-power, lightweight equipment such as monocular cameras, or microelectronic microphone arrays. Audio-Visual SLAM can also allow for complimentary function of such sensors, by compensating the narrow field-of-view, feature occlusions, and optical degradations common to lightweight visual sensors with the full field-of-view, and unobstructed feature representations inherent to audio sensors. The susceptibility of audio sensors to reverberation, sound source inactivity, and noise can also be accordingly compensated through fusion of landmark beliefs from the visual modality. Complimentary function between the audio and visual modalities in an environment can prove valuable for the creation of robotics and machines that fully interact with human speech and human movement.\n\nCollaborative SLAM combines images from multiple robots or users to generate 3D maps.[17]\n\nNon-static environments, such as those containing other vehicles or pedestrians, continue to present research challenges.[18][19] SLAM with DATMO is a model which tracks moving objects in a similar way to the agent itself.[20]\n\nLoop closure is the problem of recognizing a previously-visited location and updating beliefs accordingly. This can be a problem because model or algorithm errors can assign low priors to the location. Typical loop closure methods apply a second algorithm to compute some type of sensor measure similarity, and re-set the location priors when a match is detected. For example, this can be done by storing and comparing bag of words vectors of SIFT features from each previously visited location.\n\n\"Active SLAM\" studies the combined problem of SLAM with deciding where to move next in order to build the map as efficiently as possible. The need for active exploration is especially pronounced in sparse sensing regimes such as tactile SLAM. Active SLAM is generally performed by approximating the entropy of the map under hypothetical actions. \"Multi agent SLAM\" extends this problem to the case of multiple robots coordinating themselves to explore optimally.\n\nIn neuroscience, the hippocampus appears to be involved in SLAM-like computations,[21][22][23] giving rise to place cells, and has formed the basis for bio-inspired SLAM systems such as RatSLAM.\n\n"
        },
        {
            "title": "Implementation methods",
            "text": "Various SLAM algorithms are implemented in the open-source robot operating system (ROS) libraries, often used together with the Point Cloud Library for 3D maps or visual features from OpenCV.\n\nIn robotics, EKF SLAM is a class of algorithms which utilizes the extended Kalman filter (EKF) for SLAM. Typically, EKF SLAM algorithms are feature based, and use the maximum likelihood algorithm for data association. In the 1990s and 2000s, EKF SLAM had been the de facto method for SLAM, until the introduction of FastSLAM.[24]\n\nAssociated with the EKF is the gaussian noise assumption, which significantly impairs EKF SLAM's ability to deal with uncertainty. With greater amount of uncertainty in the posterior, the linearization in the EKF fails.[25]\n\nIn robotics, GraphSLAM is a SLAM algorithm which uses sparse information matrices produced by generating a factor graph of observation interdependencies (two observations are related if they contain data about the same landmark).[25]\n\n"
        },
        {
            "title": "History",
            "text": "A seminal work in SLAM is the research of R.C. Smith and P. Cheeseman on the representation and estimation of spatial uncertainty in 1986.[26][27] Other pioneering work in this field was conducted by the research group of Hugh F. Durrant-Whyte in the early 1990s.[28] which showed that solutions to SLAM exist in the infinite data limit. This finding motivates the search for algorithms which are computationally tractable and approximate the solution. The acronym SLAM was coined within the paper, \"Localization of Autonomous Guided Vehicles\" which first appeared in ISR in 1995.[29]\n\nThe self-driving STANLEY and JUNIOR cars, led by Sebastian Thrun, won the DARPA Grand Challenge and came second in the DARPA Urban Challenge in the 2000s, and included SLAM systems, bringing SLAM to worldwide attention. Mass-market SLAM implementations can now be found in consumer robot vacuum cleaners.[30]\n\n"
        }
    ]
}