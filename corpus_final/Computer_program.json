{
    "url": "https://en.wikipedia.org/wiki/Computer_program",
    "title": "Computer program",
    "table_of_contents": [
        "1 Example computer program",
        "2 History",
        "2.1 Analytical Engine",
        "2.2 Universal Turing machine",
        "2.3 ENIAC",
        "2.4 Stored-program computers",
        "2.5 Very Large Scale Integration",
        "2.6 Sac State 8008",
        "2.7 x86 series",
        "2.8 Changing programming environment",
        "3 Programming paradigms and languages",
        "3.1 Generations of programming language",
        "3.2 Imperative languages",
        "3.2.1 Fortran",
        "3.2.2 COBOL",
        "3.2.3 Algol",
        "3.2.4 Basic",
        "3.2.5 C",
        "3.2.6 C++",
        "3.3 Declarative languages",
        "3.3.1 Lisp",
        "3.3.2 ML",
        "3.3.3 Prolog",
        "3.4 Object-oriented programming",
        "3.5 Syntax and semantics",
        "4 Software engineering and computer programming",
        "4.1 Performance objectives",
        "4.2 Cost objectives",
        "4.3 Waterfall model",
        "4.4 Computer programmer",
        "4.5 Program modules",
        "4.6 Cohesion",
        "4.7 Coupling",
        "4.8 Data flow analysis",
        "5 Functional categories",
        "5.1 Application software",
        "5.2 Operating system",
        "5.2.1 Kernel Program",
        "5.3 Utility program",
        "5.4 Microcode program",
        "6 Notes",
        "7 References"
    ],
    "paragraphs": [
        {
            "title": "",
            "text": "A computer program is a sequence or set of instructions in a programming language for a computer to execute. Computer programs are one component of software, which also includes documentation and other intangible components.[1]\n\nA computer program in its human-readable form is called source code. Source code needs another computer program to execute because computers can only execute their native machine instructions. Therefore, source code may be translated to machine instructions using the language's compiler. (Machine language programs are translated using an assembler.) The resulting file is called an executable. Alternatively, source code may execute within the language's interpreter.[2]\n\nIf the executable is requested for execution, then the operating system loads it into memory and starts a process.[3] The central processing unit will soon switch to this process so it can fetch, decode, and then execute each machine instruction.[4]\n\nIf the source code is requested for execution, then the operating system loads the corresponding interpreter into memory and starts a process. The interpreter then loads the source code into memory to translate and execute each statement.[2] Running the source code is slower than running an executable. Moreover, the interpreter must be installed on the computer.\n\n"
        },
        {
            "title": "Example computer program",
            "text": "The \"Hello, World!\" program is used to illustrate a language's basic syntax. The syntax of the interpreted language Basic (1964) was intentionally limited to make the language easy to learn.[5]  For example, variables are not declared before being used.[6] Also, variables are automatically initialized to zero.[6] Here is an example computer program, in Basic, to average a list of numbers:[7]\n\nOnce the mechanics of basic computer programming are learned, more sophisticated and powerful languages are available to build large computer systems.[8]\n\n"
        },
        {
            "title": "History",
            "text": "Improvements in software development are the result of improvements in computer hardware. At each stage in hardware's history, the task of computer programming changed dramatically.\n\nIn 1837, Charles Babbage was inspired by Jacquard's loom to attempt to build the Analytical Engine.[9]\nThe names of the components of the calculating device were borrowed from the textile industry. In the textile industry, yarn was brought from the store to be milled. The device had a \"store\" which consisted of memory to hold 1,000 numbers of 50 decimal digits each.[10] Numbers from the \"store\" were transferred to the \"mill\" for processing. It was programmed using two sets of perforated cards. One set directed the operation and the other set inputted the variables.[9]\n[11] However, after more than 17,000 pounds of the British government's money, the thousands of cogged wheels and gears never fully worked together.[12]\n\nAda Lovelace worked for Charles Babbage to create a description of the Analytical Engine (1843).[13] The description contained Note G which completely detailed a method for calculating Bernoulli numbers using the Analytical Engine. This note is recognized by some historians as the world's first computer program.[12]\n\nIn 1936, Alan Turing introduced the Universal Turing machine, a theoretical device that can model every computation.[14]\nIt is a finite-state machine that has an infinitely long read/write tape. The machine can move the tape back and forth, changing its contents as it performs an algorithm. The machine starts in the initial state, goes through a sequence of steps, and halts when it encounters the halt state.[15] All present-day computers are Turing complete.[16]\n\nThe Electronic Numerical Integrator And Computer (ENIAC) was built between July 1943 and Fall 1945. It was a Turing complete, general-purpose computer that used 17,468 vacuum tubes to create the circuits. At its core, it was a series of Pascalines wired together.[17] Its 40 units weighed 30 tons, occupied 1,800 square feet (167 m2), and consumed $650 per hour (in 1940s currency) in electricity when idle.[17] It had 20 base-10 accumulators. Programming the ENIAC took up to two months.[17] Three function tables were on wheels and needed to be rolled to fixed function panels. Function tables were connected to function panels by plugging heavy black cables into plugboards. Each function table had 728 rotating knobs. Programming the ENIAC also involved setting some of the 3,000 switches. Debugging a program took a week.[18] It ran from 1947 until 1955 at Aberdeen Proving Ground, calculating hydrogen bomb parameters, predicting weather patterns, and producing firing tables to aim artillery guns.[19]\n\nInstead of plugging in cords and turning switches, a stored-program computer loads its instructions into memory just like it loads its data into memory.[20] As a result, the computer could be programmed quickly and perform calculations at very fast speeds.[21] Presper Eckert and John Mauchly built the ENIAC. The two engineers introduced the stored-program concept in a three-page memo dated February 1944.[22] Later, in September 1944, Dr. John von Neumann began working on the ENIAC project. On June 30, 1945, von Neumann published the First Draft of a Report on the EDVAC which equated the structures of the computer with the structures of the human brain.[21] The design became known as the von Neumann architecture. The architecture was simultaneously deployed in the constructions of the EDVAC and EDSAC computers in 1949.[23]\n\nThe IBM System/360 (1964) was a line of six computers, each having the same instruction set architecture. The Model 30 was the smallest and least expensive. Customers could upgrade and retain the same application software.[24] The Model 75 was the most premium.  Each System/360 model featured multiprogramming[24]—having multiple processes in memory at once. When one process was waiting for input/output, another could compute.\n\nIBM planned for each model to be programmed using PL/1.[25] A committee was formed that included COBOL, Fortran and ALGOL programmers. The purpose was to develop a language that was comprehensive, easy to use, extendible, and would replace Cobol and Fortran.[25] The result was a large and complex language that took a long time to compile.[26]\n\nComputers manufactured until the 1970s had front-panel switches for manual programming.[27] The computer program was written on paper for reference. An instruction was represented by a configuration of on/off settings. After setting the configuration, an execute button was pressed. This process was then repeated. Computer programs also were automatically inputted via paper tape or punched cards. After the medium was loaded, the starting address was set via switches, and the execute button was pressed.[27]\n\nA major milestone in software development was the invention of the Very Large Scale Integration (VLSI) circuit (1964).[28] Following World War II, tube-based technology was replaced with point-contact transistors (1947) and bipolar junction transistors (late 1950s) mounted on a circuit board.[28] During the 1960s, the aerospace industry replaced the circuit board with an integrated circuit chip.[28]\n\nRobert Noyce, co-founder of Fairchild Semiconductor (1957) and Intel (1968), achieved a technological improvement to refine the production of field-effect transistors (1963).[29] The goal is to alter the electrical resistivity and conductivity of a semiconductor junction. First, naturally occurring silicate minerals are converted into polysilicon rods using the Siemens process.[30] The Czochralski process then converts the rods into a monocrystalline silicon, boule crystal.[31] The crystal is then thinly sliced to form a wafer substrate. The planar process of photolithography then integrates unipolar transistors, capacitors, diodes, and resistors onto the wafer to build a matrix of metal–oxide–semiconductor (MOS) transistors.[32][33] The MOS transistor is the primary component in integrated circuit chips.[29]\n\nOriginally, integrated circuit chips had their function set during manufacturing. During the 1960s, controlling the electrical flow migrated to programming a matrix of read-only memory (ROM). The matrix resembled a two-dimensional array of fuses.[28] The process to embed instructions onto the matrix was to burn out the unneeded connections.[28] There were so many connections, firmware programmers wrote a computer program on another chip to oversee the burning.[28] The technology became known as Programmable ROM. In 1971, Intel installed the computer program onto the chip and named it the Intel 4004 microprocessor.[34]\n\nThe terms microprocessor and central processing unit (CPU) are now used interchangeably. However, CPUs predate microprocessors. For example, the IBM System/360 (1964) had a CPU made from circuit boards containing discrete components on ceramic substrates.[35]\n\nThe Intel 4004 (1971) was a 4-bit microprocessor designed to run the Busicom calculator. Five months after its release, Intel released the Intel 8008, an 8-bit microprocessor. Bill Pentz led a team at Sacramento State to build the first microcomputer using the Intel 8008: the Sac State 8008 (1972).[36] Its purpose was to store patient medical records. The computer supported a disk operating system to run a Memorex, 3-megabyte, hard disk drive.[28] It had a color display and keyboard that was packaged in a single console. The disk operating system was programmed using IBM's Basic Assembly Language (BAL). The medical records application was programmed using a BASIC interpreter.[28] However, the computer was an evolutionary dead-end because it was extremely expensive. Also, it was built at a public university lab for a specific purpose.[36] Nonetheless, the project contributed to the development of the Intel 8080 (1974) instruction set.[28]\n\nIn 1978, the modern software development environment began when Intel upgraded the Intel 8080 to the Intel 8086. Intel simplified the Intel 8086 to manufacture the cheaper Intel 8088.[37] IBM embraced the Intel 8088 when they entered the personal computer market (1981). As consumer demand for personal computers increased, so did Intel's microprocessor development. The succession of development is known as the x86 series. The x86 assembly language is a family of backward-compatible machine instructions. Machine instructions created in earlier microprocessors were retained throughout microprocessor upgrades. This enabled consumers to purchase new computers without having to purchase new application software.  The major categories of instructions are:[a]\n\nVLSI circuits enabled the programming environment to advance from a computer terminal (until the 1990s) to a graphical user interface (GUI) computer. Computer terminals limited programmers to a single shell running in a command-line environment. During the 1970s, full-screen source code editing became possible through a text-based user interface. Regardless of the technology available, the goal is to program in a programming language.\n\n"
        },
        {
            "title": "Programming paradigms and languages",
            "text": "Programming language features exist to provide building blocks to be combined to express programming ideals.[38] Ideally, a programming language should:[38]\n\nThe programming style of a programming language to provide these building blocks may be categorized into programming paradigms.[39] For example, different paradigms may differentiate:[39]\n\nEach of these programming styles has contributed to the synthesis of different programming languages.[39]\n\nA programming language is a set of keywords, symbols, identifiers, and rules by which programmers can communicate instructions to the computer.[40] They follow a set of rules called a syntax.[40]\n\nProgramming languages get their basis from formal languages.[41] The purpose of defining a solution in terms of its formal language is to generate an algorithm to solve the underlining problem.[41] An algorithm is a sequence of simple instructions that solve a problem.[42]\n\nThe evolution of programming language began when the EDSAC (1949) used the first stored computer program in its von Neumann architecture.[43] Programming the EDSAC was in the first generation of programming language.\n\nImperative languages specify a sequential algorithm using declarations, expressions, and statements:[51]\n\nFORTRAN (1958) was unveiled as \"The IBM Mathematical FORmula TRANslating system.\" It was designed for scientific calculations, without string handling facilities. Along with declarations, expressions, and statements, it supported:\n\nIt succeeded because:\n\nHowever, non-IBM vendors also wrote Fortran compilers, but with a syntax that would likely fail IBM's compiler.[53] The American National Standards Institute (ANSI) developed the first Fortran standard in 1966. In 1978, Fortran 77 became the standard until 1991. Fortran 90 supports:\n\nCOBOL (1959) stands for \"COmmon Business Oriented Language.\" Fortran manipulated symbols. It was soon realized that symbols didn't need to be numbers, so strings were introduced.[54] The US Department of Defense influenced COBOL's development, with Grace Hopper being a major contributor. The statements were English-like and verbose. The goal was to design a language so managers could read the programs. However, the lack of structured statements hindered this goal.[55]\n\nCOBOL's development was tightly controlled, so dialects didn't emerge to require ANSI standards. As a consequence, it wasn't changed for 15 years until 1974. The 1990s version did make consequential changes, like object-oriented programming.[55]\n\nALGOL (1960) stands for \"ALGOrithmic Language.\" It had a profound influence on programming language design.[56] Emerging from a committee of European and American programming language experts, it used standard mathematical notation and had a readable structured design. Algol was first to define its syntax using the Backus–Naur form.[56] This led to syntax-directed compilers. It added features like:\n\nAlgol's direct descendants include Pascal, Modula-2, Ada, Delphi and Oberon on one branch. On another branch there's C, C++ and Java.[56]\n\nBASIC (1964) stands for \"Beginner's All-Purpose Symbolic Instruction Code.\" It was developed at Dartmouth College for all of their students to learn.[7] If a student didn't go on to a more powerful language, the student would still remember Basic.[7] A Basic interpreter was installed in the microcomputers manufactured in the late 1970s. As the microcomputer industry grew, so did the language.[7]\n\nBasic pioneered the interactive session.[7] It offered operating system commands within its environment:\n\nHowever, the Basic syntax was too simple for large programs.[7] Recent dialects added structure and object-oriented extensions. Microsoft's Visual Basic is still widely used and produces a graphical user interface.[6]\n\nC programming language (1973) got its name because the language BCPL was replaced with B, and AT&T Bell Labs called the next version \"C.\" Its purpose was to write the UNIX operating system.[49] C is a relatively small language, making it easy to write compilers. Its growth mirrored the hardware growth in the 1980s.[49] Its growth also was because it has the facilities of assembly language, but uses a high-level syntax. It added advanced features like:\n\nC allows the programmer to control which region of memory data is to be stored. Global variables and static variables require the fewest clock cycles to store. The stack is automatically used for the standard variable declarations. Heap memory is returned to a pointer variable from the malloc() function.\n\nIn the 1970s, software engineers needed language support to break large projects down into modules.[64] One obvious feature was to decompose large projects physically into separate files. A less obvious feature was to decompose large projects logically into abstract datatypes.[64] At the time, languages supported concrete (scalar) datatypes like integer numbers, floating-point numbers, and strings of characters. Concrete datatypes have their representation as part of their name.[65] Abstract datatypes are structures of concrete datatypes, with a new name assigned. For example, a list of integers could be called integer_list.\n\nIn object-oriented jargon, abstract datatypes are called classes. However, a class is only a definition; no memory is allocated. When memory is allocated to a class, it's called an object.[66]\n\nObject-oriented imperative languages developed by combining the need for classes and the need for safe functional programming.[67] A function, in an object-oriented language, is assigned to a class. An assigned function is then referred to as a method, member function, or operation. Object-oriented programming is executing operations on objects.[68]\n\nObject-oriented languages support a syntax to model subset/superset relationships. In set theory, an element of a subset inherits all the attributes contained in the superset. For example, a student is a person. Therefore, the set of students is a subset of the set of persons. As a result, students inherit all the attributes common to all persons. Additionally, students have unique attributes that other people don't have. Object-oriented languages model subset/superset relationships using inheritance.[69] Object-oriented programming became the dominant language paradigm by the late 1990s.[64]\n\nC++ (1985) was originally called \"C with Classes.\"[70] It was designed to expand C's capabilities by adding the object-oriented facilities of the language Simula.[71]\n\nAn object-oriented module is composed of two files. The definitions file is called the header file. Here is a C++ header file for the GRADE class in a simple school application:\n\nA constructor operation is a function with the same name as the class name.[72] It is executed when the calling operation executes the new statement.\n\nA module's other file is the source file. Here is a C++ source file for the GRADE class in a simple school application:\n\nHere is a C++ header file for the PERSON class in a simple school application:\n\nHere is a C++ source file for the PERSON class in a simple school application:\n\nHere is a C++ header file for the STUDENT class in a simple school application:\n\nHere is a C++ source file for the STUDENT class in a simple school application:\n\nHere is a driver program for demonstration:\n\nHere is a makefile to compile everything:\n\nImperative languages have one major criticism: assigning an expression to a non-local variable may produce an unintended side effect.[73] Declarative languages generally omit the assignment statement and the control flow. They describe what computation should be performed and not how to compute it. Two broad categories of declarative languages are functional languages and logical languages.\n\nThe principle behind a functional language is to use lambda calculus as a guide for a well defined semantic.[74] In mathematics, a function is a rule that maps elements from an expression to a range of values. Consider the function:\n\ntimes_10(x) = 10 * x\n\nThe expression 10 * x is mapped by the function times_10() to a range of values. One value happens to be 20. This occurs when x is 2. So, the application of the function is mathematically written as:\n\ntimes_10(2) = 20\n\nA functional language compiler will not store this value in a variable. Instead, it will push the value onto the computer's stack before setting the program counter back to the calling function. The calling function will then pop the value from the stack.[75]\n\nImperative languages do support functions. Therefore, functional programming can be achieved in an imperative language if the programmer uses discipline. However, a functional language will force this discipline onto the programmer through its syntax. Functional languages have a syntax tailored to emphasize the what.[76]\n\nA functional program is developed with a set of primitive functions followed by a single driver function.[73] Consider the snippet:\n\nfunction max(a,b){ /* code omitted */}\n\nfunction min(a,b){ /* code omitted */}\n\nfunction difference_between_largest_and_smallest(a,b,c) {\n\n}\n\nThe primitives are max() and min(). The driver function is difference_between_largest_and_smallest(). Executing:\n\nput(difference_between_largest_and_smallest(10,4,7)); will output 6.\n\nFunctional languages are used in computer science research to explore new language features.[77] Moreover, their lack of side-effects have made them popular in parallel programming and concurrent programming.[78] However, application developers prefer the object-oriented features of imperative languages.[78]\n\nLisp (1958) stands for \"LISt Processor.\"[79] It is tailored to process lists. A full structure of the data is formed by building lists of lists. In memory, a tree data structure is built. Internally, the tree structure lends nicely for recursive functions.[80] The syntax to build a tree is to enclose the space-separated elements within parenthesis. The following is a list of three elements. The first two elements are themselves lists of two elements:\n\n((A B) (HELLO WORLD) 94)\n\nLisp has functions to extract and reconstruct elements.[81] The function head() returns a list containing the first element in the list. The function tail() returns a list containing everything but the first element. The function cons() returns a list that is the concatenation of other lists. Therefore, the following expression will return the list x:\n\ncons(head(x), tail(x))\n\nOne drawback of Lisp is when many functions are nested, the parentheses may look confusing.[76] Modern Lisp environments help ensure parenthesis match. As an aside, Lisp does support the imperative language operations of the assignment statement and goto loops.[82] Also, Lisp is not concerned with the datatype of the elements at compile time.[83] Instead, it assigns (and may reassign) the datatypes at runtime. Assigning the datatype at runtime is called dynamic binding.[84] Whereas dynamic binding increases the language's flexibility, programming errors may linger until late in the software development process.[84]\n\nWriting large, reliable, and readable Lisp programs requires forethought. If properly planned, the program may be much shorter than an equivalent imperative language program.[76] Lisp is widely used in artificial intelligence. However, its usage has been accepted only because it has imperative language operations, making unintended side-effects possible.[78]\n\nML (1973)[85] stands for \"Meta Language.\" ML checks to make sure only data of the same type are compared with one another.[86] For example, this function has one input parameter (an integer) and returns an integer:\n\nML is not parenthesis-eccentric like Lisp. The following is an application of times_10():\n\nIt returns \"20 : int\". (Both the results and the datatype are returned.)\n\nLike Lisp, ML is tailored to process lists. Unlike Lisp, each element is the same datatype.[87] Moreover, ML assigns the datatype of an element at compile-time. Assigning the datatype at compile-time is called static binding. Static binding increases reliability because the compiler checks the context of variables before they are used.[88]\n\nProlog (1972) stands for \"PROgramming in LOgic.\" It was designed to process natural languages.[89] The building blocks of a Prolog program are objects and their relationships to other objects. Objects are built by stating true facts about them.[90]\n\nSet theory facts are formed by assigning objects to sets. The syntax is setName(object).\n\nAdjective facts are formed using adjective(object).\n\nRelationships are formed using multiple items inside the parentheses. In our example we have verb(object,object) and verb(adjective,adjective).\n\nAfter all the facts and relationships are entered, then a question can be asked:\n\nProlog's usage has expanded to become a goal-oriented language.[91] In a goal-oriented application, the goal is defined by providing a list of subgoals. Then each subgoal is defined by further providing a list of its subgoals, etc. If a path of subgoals fails to find a solution, then that subgoal is backtracked and another path is systematically attempted.[90] Practical applications include solving the shortest path problem[89] and producing family trees.[92]\n\nObject-oriented programming is a programming method to execute operations (functions) on objects.[93] The basic idea is to group the characteristics of a phenomenon into an object container and give the container a name. The operations on the phenomenon are also grouped into the container.[93] Object-oriented programming developed by combining the need for containers and the need for safe functional programming.[94] This programming method need not be confined to an object-oriented language.[95] In an object-oriented language, an object container is called a class. In a non-object-oriented language, a data structure (which is also known as a record) may become an object container. To turn a data structure into an object container, operations need to be written specifically for the structure. The resulting structure is called an abstract datatype.[96] However, inheritance will be missing. Nonetheless, this shortcoming can be overcome.\n\nHere is a C programming language header file for the GRADE abstract datatype in a simple school application:\n\nThe grade_new() function performs the same algorithm as the C++ constructor operation.\n\nHere is a C programming language source file for the GRADE abstract datatype in a simple school application:\n\nIn the constructor, the function calloc() is used instead of malloc() because each memory cell will be set to zero.\n\nHere is a C programming language header file for the PERSON abstract datatype in a simple school application:\n\nHere is a C programming language source file for the PERSON abstract datatype in a simple school application:\n\nHere is a C programming language header file for the STUDENT abstract datatype in a simple school application:\n\nHere is a C programming language source file for the STUDENT abstract datatype in a simple school application:\n\nHere is a driver program for demonstration:\n\nHere is a makefile to compile everything:\n\nThe formal strategy to build object-oriented objects is to:[97]\n\nFor example:\n\nThe syntax of a programming language is a list of production rules which govern its form.[98] A programming language's form is the correct placement of its declarations, expressions, and statements.[99] Complementing the syntax of a language are its semantics. The semantics describe the meanings attached to various syntactic constructs.[98] A syntactic construct may need a semantic description because a form may have an invalid interpretation.[100] Also, different languages might have the same syntax; however, their behaviors may be different.\n\nThe syntax of a language is formally described by listing the production rules. Whereas the syntax of a natural language is extremely complicated, a subset of the English language can have this production rule listing:[101]\n\nThe words in bold-face are known as \"non-terminals\". The words in 'single quotes' are known as \"terminals\".[102]\n\nFrom this production rule listing, complete sentences may be formed using a series of replacements.[103] The process is to replace non-terminals with either a valid non-terminal or a valid terminal. The replacement process repeats until only terminals remain. One valid sentence is:\n\nHowever, another combination results in an invalid sentence:\n\nTherefore, a semantic is necessary to correctly describe the meaning of an eat activity.\n\nOne production rule listing method is called the Backus–Naur form (BNF).[104] BNF describes the syntax of a language and itself has a syntax. This recursive definition is an example of a meta-language.[98] The syntax of BNF includes:\n\nUsing BNF, a subset of the English language can have this production rule listing:\n\nUsing BNF, a signed-integer has the production rule listing:[105]\n\nNotice the recursive production rule:\n\nThis allows for an infinite number of possibilities. Therefore, a semantic is necessary to describe a limitation of the number of digits.\n\nNotice the leading zero possibility in the production rules:\n\nTherefore, a semantic is necessary to describe that leading zeros need to be ignored.\n\nTwo formal methods are available to describe semantics. They are denotational semantics and axiomatic semantics.[106]\n\n"
        },
        {
            "title": "Software engineering and computer programming",
            "text": "Software engineering is a variety of techniques to produce quality software.[107] Computer programming is the process of writing or editing source code. In a formal environment, a systems analyst will gather information from managers about all the organization's processes to automate. This professional then prepares a detailed plan for the new or modified system.[108] The plan is analogous to an architect's blueprint.[108]\n\nThe systems analyst has the objective to deliver the right information to the right person at the right time.[109] The critical factors to achieve this objective are:[109]\n\nAchieving performance objectives should be balanced with all of the costs, including:[110]\n\nApplying a systems development process will mitigate the axiom: the later in the process an error is detected, the more expensive it is to correct.[111]\n\nThe waterfall model is an implementation of a systems development process.[112] As the waterfall label implies, the basic phases overlap each other:[113]\n\nA computer programmer is a specialist responsible for writing or modifying the source code to implement the detailed plan.[108] A programming team is likely to be needed because most systems are too large to be completed by a single programmer.[115] However, adding programmers to a project may not shorten the completion time. Instead, it may lower the quality of the system.[115] To be effective, program modules need to be defined and distributed to team members.[115] Also, team members must interact with one another in a meaningful and effective way.[115]\n\nComputer programmers may be programming-in-the-small: programming within a single module.[116] Chances are a module will execute modules located in other source code files. Therefore, computer programmers may be programming-in-the-large: programming modules so they will effectively couple with each other.[116] Programming-in-the-large includes contributing to the application programming interface (API).\n\nModular programming is a technique to refine imperative language programs. Refined programs may reduce the software size, separate responsibilities, and thereby mitigate software aging. A program module is a sequence of statements that are bounded within a block and together identified by a name.[117] Modules have a function, context, and logic:[118]\n\nThe module's name should be derived first by its function, then by its context. Its logic should not be part of the name.[118] For example, function compute_square_root( x ) or function compute_square_root_integer( i : integer ) are appropriate module names. However, function compute_square_root_by_division( x ) is not.\n\nThe degree of interaction within a module is its level of cohesion.[118] Cohesion is a judgment of the relationship between a module's name and its function. The degree of interaction between modules is the level of coupling.[119] Coupling is a judgement of the relationship between a module's context and the elements being performed upon.\n\nThe levels of cohesion from worst to best are:[120]\n\nThe levels of coupling from worst to best are:[119]\n\nData flow analysis is a design method used to achieve modules of functional cohesion and data coupling.[121] The input to the method is a data-flow diagram. A data-flow diagram is a set of ovals representing modules. Each module's name is displayed inside its oval. Modules may be at the executable level or the function level.\n\nThe diagram also has arrows connecting modules to each other. Arrows pointing into modules represent a set of inputs. Each module should have only one arrow pointing out from it to represent its single output object. (Optionally, an additional exception arrow points out.) A daisy chain of ovals will convey an entire algorithm. The input modules should start the diagram. The input modules should connect to the transform modules. The transform modules should connect to the output modules.[122]\n\n"
        },
        {
            "title": "Functional categories",
            "text": "Computer programs may be categorized along functional lines. The main functional categories are application software and system software. System software includes the operating system, which couples computer hardware with application software.[123] The purpose of the operating system is to provide an environment where application software executes in a convenient and efficient manner.[123] Both application software and system software execute utility programs. At the hardware level, a microcode program controls the circuits throughout the central processing unit.\n\nApplication software is the key to unlocking the potential of the computer system.[124] Enterprise application software bundles accounting, personnel, customer, and vendor applications. Examples include enterprise resource planning, customer relationship management, and supply chain management software.\n\nEnterprise applications may be developed in-house as a one-of-a-kind proprietary software.[125] Alternatively, they may be purchased as off-the-shelf software. Purchased software may be modified to provide custom software. If the application is customized, then either the company's resources are used or the resources are outsourced. Outsourced software development may be from the original software vendor or a third-party developer.[126]\n\nThe potential advantages of in-house software are features and reports may be developed exactly to specification.[127] Management may also be involved in the development process and offer a level of control.[128] Management may decide to counteract a competitor's new initiative or implement a customer or vendor requirement.[129]  A merger or acquisition may necessitate enterprise software changes. The potential disadvantages of in-house software are time and resource costs may be extensive.[125] Furthermore, risks concerning features and performance may be looming.\n\nThe potential advantages of off-the-shelf software are upfront costs are identifiable, the basic needs should be fulfilled, and its performance and reliability have a track record.[125] The potential disadvantages of off-the-shelf software are it may have unnecessary features that confuse end users, it may lack features the enterprise needs, and the data flow may not match the enterprise's work processes.[125]\n\nOne approach to economically obtaining a customized enterprise application is through an application service provider.[130] Specialty companies provide hardware, custom software, and end-user support. They may speed the development of new applications because they possess skilled information system staff. The biggest advantage is it frees in-house resources from staffing and managing complex computer projects.[130] Many application service providers target small, fast-growing companies with limited information system resources.[130] On the other hand, larger companies with major systems will likely have their technical infrastructure in place. One risk is having to trust an external organization with sensitive information. Another risk is having to trust the provider's infrastructure reliability.[130]\n\nAn operating system is the low-level software that supports a computer's basic functions, such as scheduling processes and controlling peripherals.[123]\n\nIn the 1950s, the programmer, who was also the operator, would write a program and run it. After the program finished executing, the output may have been printed, or it may have been punched onto paper tape or cards for later processing.[27] More often than not the program did not work. The programmer then looked at the console lights and fiddled with the console switches. If less fortunate, a memory printout was made for further study. In the 1960s, programmers reduced the amount of wasted time by automating the operator's job. A program called an operating system was kept in the computer at all times.[131]\n\nThe term operating system may refer to two levels of software.[132] The operating system may refer to the kernel program that manages the processes, memory, and devices. More broadly, the operating system may refer to the entire package of the central software. The package includes a kernel program, command-line interpreter, graphical user interface, utility programs, and editor.[132]\n\nThe kernel's main purpose is to manage the limited resources of a computer:\n\nOriginally, operating systems were programmed in assembly; however, modern operating systems are typically written in higher-level languages like C, Objective-C, and Swift.[e]\n\nA utility program is designed to aid system administration and software execution. Operating systems execute hardware utility programs to check the status of disk drives, memory, speakers, and printers.[141] A utility program may optimize the placement of a file on a crowded disk. System utility programs monitor hardware and network performance. When a metric is outside an acceptable range, a trigger alert is generated.[142]\n\nUtility programs include compression programs so data files are stored on less disk space.[141] Compressed programs also save time when data files are transmitted over the network.[141] Utility programs can sort and merge data sets.[142] Utility programs detect computer viruses.[142]\n\nA microcode program is the bottom-level interpreter that controls the data path of software-driven computers.[143]\n(Advances in hardware have migrated these operations to hardware execution circuits.)[143] Microcode instructions allow the programmer to more easily implement the digital logic level[144]—the computer's real hardware. The digital logic level is the boundary between computer science and computer engineering.[145]\n\nA logic gate is a tiny transistor that can return one of two signals: on or off.[146]\n\nThese five gates form the building blocks of binary algebra—the digital logic functions of the computer.\n\nMicrocode instructions are mnemonics programmers may use to execute digital logic functions instead of forming them in binary algebra. They are stored in a central processing unit's (CPU) control store.[147]\nThese hardware-level instructions move data throughout the data path.\n\nThe micro-instruction cycle begins when the microsequencer uses its microprogram counter to fetch the next machine instruction from random-access memory.[148] The next step is to decode the machine instruction by selecting the proper output line to the hardware module.[149]\nThe final step is to execute the instruction using the hardware module's set of gates.\n\nInstructions to perform arithmetic are passed through an arithmetic logic unit (ALU).[150] The ALU has circuits to perform elementary operations to add, shift, and compare integers. By combining and looping the elementary operations through the ALU, the CPU performs its complex arithmetic.\n\nMicrocode instructions move data between the CPU and the memory controller. Memory controller microcode instructions manipulate two registers. The memory address register is used to access each memory cell's address. The memory data register is used to set and read each cell's contents.[151]\n\nMicrocode instructions move data between the CPU and the many computer buses. The disk controller bus writes to and reads from hard disk drives. Data is also moved between the CPU and other functional units via the peripheral component interconnect express bus.[152]\n\n"
        }
    ]
}