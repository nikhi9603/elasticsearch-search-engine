{
    "url": "https://en.wikipedia.org/wiki/ROM_hacking",
    "title": "ROM hacking",
    "table_of_contents": [
        "1 Communities",
        "2 Methods",
        "2.1 Hex editing",
        "2.2 Graphics editing",
        "2.3 Palette editing",
        "2.4 Level editing",
        "2.5 Data editing",
        "2.6 Assembly hacking",
        "2.7 Music hacking",
        "2.8 ROM expansion",
        "3 Distribution",
        "4 Usage",
        "5 Systems and games",
        "6 See also",
        "7 References"
    ],
    "paragraphs": [
        {
            "title": "",
            "text": "ROM hacking is the process of modifying a ROM image or ROM file of a video game to alter the game's graphics, dialogue, levels, gameplay, and/or other elements. This is usually done by technically inclined video game fans to improve an old game of importance, as a creative outlet, or to make new, unofficial games using the old game's engine. ROM hacks either re-design a game for new, fun gameplay while keeping most if not all the items the same, or unlock/reimplement features that exist in the game's code but are not utilized in-game.\n\nROM hacking is generally accomplished through use of a hex editor (a program for editing non-textual data) and various specialized tools such as tile editors, and game-specific tools which are generally used for editing levels, items, and the like, although more advanced tools such as assemblers and debuggers are occasionally used. Once ready, they are usually distributed on the Internet for others to play on an emulator or games console.[1]\n\nFan translation (known as \"translation hacking\" within the ROM hacking community) is a type of ROM hacking; there are also anti-censorship hacks that exist to restore a game to its original state, which is often seen with older games that were imported, as publishers' content policies for video games (most notably, Nintendo's) were much stricter in the United States than Japan or Europe; as well as randomizers for certain games which shuffle entity placements.[2] Although much of the method applies to both types of hacking, this article focuses on \"creative hacking\" such as editing game levels.\n\n"
        },
        {
            "title": "Communities",
            "text": "Most hacking groups offer web space for hosting hacks and screenshots (sometimes only hosting hacks by the group's members, sometimes hosting almost any hack), a message board, and often have an IRC channel.\n\n"
        },
        {
            "title": "Methods",
            "text": "Having been created by many different programmers or programming teams, ROM data can be very diverse.\n\nA hex editor is one of the most fundamental tools in any ROM hacker's repertoire. Hex editors are usually used for editing text, and for editing other data for which the structure is known (for example, item properties), and Assembly hacking.\n\nEditing text is one of the most basic forms of hacking. Many games do not store their text in ASCII form, and because of this, some specialized hex editors have been developed, which can be told what byte values correspond to what letter(s) of the alphabet, to facilitate text editing; a file that defines these byte=letter relationships is called a \"table\" file. Other games use simple text compression techniques (such as byte pair encoding, also called dual tile encoding or DTE, in which certain combinations of two or more letters are encoded as one byte) which a suitably equipped hex editor can facilitate editing.\n\nA hex editor is the tool of choice for editing things such as character/item properties, if the structure and location of this data is known and there is no game-specific editor for the game that can edit this information. Some intrepid hackers also perform level editing with a hex editor, but this is extremely difficult (except on games whose level storage format closely resembles how it is presented in a hex editor).\n\nAnother basic hacking skill is graphics hacking, which is changing the appearance of the game's environments, characters, fonts, or other such things. The format of graphics data varies from console to console, but most of the early ones (NES, Super NES, Game Boy, etc.) store graphics in tiles, which are 8x8-pixel units of data, which are arranged on-screen to produce the desired result. Editing these tiles is also possible with a hex editor, but is generally accomplished with a tile editor (such as Tile Layer or Tile Molester), which can display the ROM data in a graphical way, as well as finding and editing tiles.\n\nGraphics hacks can range from simple edits (such as giving Mario an afro or Luigi a golf club) to \"porting\" characters from one game to another (such as creating pixelated \"retro-styled\" sprites of later generation Pokémon for use in Generation I-III Pokémon games), to full-blown thematic changes (usually with accompanying palette changes; see below).\n\nMore sophisticated graphics hacking involves changing more than just tiles and colors, but also the way in which the tiles are arranged, or tile groups generated, giving more flexibility and control over the final appearance. This is accomplished through hex editing or a specialized tool (either for a specific game or a specific system). A good example of a graphics hack is the incomplete Pokémon Torzach, a hack of Pokémon FireRed which attempted to add a whole new generation of Pokémon and tiles to the game. The hack has since been discontinued, but it still serves as a good example on what can be achieved with the tools available.\n\nAnother common form of hacking is palette hacking, where color values are modified to change the colors a player sees in the game (this often goes hand-in-hand with graphics hacking); Palette values are commonly stored in Hex. This is fairly easy for NES games, the graphics of which use a pre-defined set of colors among which a game selects (using a YIQ-based color palette); palette hacking in this case entails changing which of those colors are selected. The matter is slightly more complicated with Super NES and Sega Mega Drive/Genesis games, as well as games for other systems, which store absolute RGB color values. Palette editors are usually simple and often are with level editors or game-specific graphics editors.\n\nOne of the most popular forms of ROM hacking, level editing entails modifying or redesigning a game's levels or maps. This is almost exclusively done with an editor specially tailored for a particular game (called a level editor). Level edits can be done to make the game more challenging, to alter the flow of the game's plot, or just to give something new to an old game. Combined with extensive graphics hacking, the game can take on a very different look and feel.\n\nA core component of many hacks (especially of role-playing video games) is editing data such as character, item, and enemy properties. This is usually done either \"by hand\" (with a hex editor) if the location and structure of the data is known, or with a game-specific editor that has this functionality. Through this, a hacker can alter how weapons work, how strong enemies are or how they act, etc. This can be done to make the game easier or harder, or to create new scenarios for the player to face.\n\nThe most powerful, and arguably the most difficult, hacking technique is editing the game's actual code, a process called ASM hacking (\"ASM\" means \"assembly\", referring to the low level programming language that gets executed by the CPU).[1] There is no set pattern for ASM hacking, as the code varies widely from game to game, but most skilled ASM hackers either use an emulator equipped with a built-in debugger or tracer, or run the ROM through a disassembler, then analyze the code and modify it using a hex editor or assembler according to their needs. While quite challenging compared to the relatively simple methods listed above, anything is possible with ASM hacking (of course, within the limits of the hardware/software of the gaming platform), ranging from altering enemy AI to changing how graphics are generated. (Of course, the possibilities are still limited by the hacker's ability to comprehend and modify the existing code.)\n\nIf the developers used a typed language, the hacker may be able to compile their own code for the game in the same language if they have access to a proper compiler. One such example would be using C to hack Nintendo 64 games, since MIPS-GCC can compile code for the Nintendo 64.[3][4]\n\nMusic hacks are relatively rare, due to the wide variety of ways games store music data (hence the difficulty in locating and modifying this data) and the difficulties in composing new music (or porting music from another game). As music cracking is very uncommon, many hacks do not have any ported/composed music added in. An exception to this rule can be found in most Super Mario World hacks, where custom music can often have new instruments that are not found in the original game. Other games that have music hacking as part of their research and hacking communities are the NES Mega Man games, Final Fantasy VI, and the Mega Drive (Genesis) Sonic the Hedgehog games.\n\nAs many Game Boy Advance games use the M4A Engine (also called \"Sappy Driver\") for music, the program SapTapper can be used to hack Game Boy Advance music data. Various other utilities were created to work with the engine such as Sappy 2006.\n\nAnother instance of the same engine being used between games is on the Nintendo 64, in which most games use the same format; however they use different sound banks. A utility known as the N64 Midi Tool was created to edit the sequences that the majority of Nintendo 64 games use, though it does not cover the first-party N64 titles that use a slightly different engine, such as Super Mario 64.\n\nSeveral Sega Mega Drive/Genesis games[5] use a sound engine unofficially known as \"SMPS\",[6] which are offered in both 68k and Z80 versions. Used in a number of Japanese-developed games for the system, the sound engine has been researched for decades by many hackers.[7] As of today, various tools exist[8] to alter the music of games which use the SMPS engine (most notably the Sonic the Hedgehog games in particular), and many of them made their way to the Steam Workshop.[9]\n\nGenerally speaking, a ROM hacker cannot normally add content to a game, but merely change existing content. This limit can be overcome through ROM expansion, whereby the total size of the ROM image is increased, making room for more content and, in turn, a larger game. The difficulty in doing this varies depending on the system for which the game was made. For example, expanding an NES ROM may be difficult or even impossible due to the mapper used by the game. For example, if a mapper allows 16 ROM banks and all of them are used, expanding the ROM further is impossible without somehow converting the game to another mapper, which could be easy or extremely difficult. On the other hand, expanding a SNES game is (relatively) straightforward. To utilize the added space, parts of the game code have to be modified or re-written (see Assembly hacking above) so the game knows where to look. Another type of ROM expansion that is fairly easy is Game Boy Advance ROMs. The ROMs themselves are generally small, but the memory space available sometimes exceeds it by multiples of up to 17.\n\n"
        },
        {
            "title": "Distribution",
            "text": "Once a hack is completed (or an incomplete version is deemed suitable for an interim release) it is released onto the Internet for others to play. The generally accepted way to do this is by making an unofficial patch (in IPS format or others) that can be applied to the unmodified ROM.[1] This, and usually some form of documentation, is put in an archive file and uploaded somewhere. IPS is a format for recording the differences between two binary files (in this case, between the unmodified and hacked ROMs) and is suitable for ROM hacks.[10] IPS is still used today for small patches—however, as ROMs became larger in size, this format became useless, leading to quite a few file formats being created—such as NINJA and PPF (also known as \"PlayStation Patch Format\"). PPF is still used today, particularly to patch large files such as ISO CD images as well as Nintendo 64 games. A new patch format, UPS, has also been developed by the ROM hacking community, designed to be the successor to IPS and PPF.[11]\nA more recent patching format, the APS patching system, has also been developed by a devoted Game Boy Advance ROM hacker.[12] The APS system is more space efficient, is reversible, and is faster than its predecessor.[13]\n\nThe purpose of distributing a hack in patch form is to avoid the legal aspects of distributing entire ROM images; the patch records only what has changed in the ROM, hence distributing it does not usually distribute parts of the original game. A patch is also normally drastically smaller than the full ROM image (an NES ROM can run anywhere from 8 KB to 2 MB; a Super NES ROM can run from 256 KB to 6 MB; and Mega Drive/Genesis ROMs can run from 512 KB to 4 MB). Also, since patches usually only contained user-made code changes and not copyrighted code, it was not illegal to distribute one.\n\nIn a novel example of legal distribution, Sega released a Steam-based virtual hub for its previous collection of Mega Drive/Genesis games, entitled Sega Mega Drive Classics Hub. The Hub, besides allowing players to play emulated versions of these older games, takes advantage of Steam's support for user-created content through the Steam Workshop, officially allowing the distribution of ROM hacks of any of the offered games.[14]\n\n"
        },
        {
            "title": "Usage",
            "text": "Patched ROMs are often played on emulators, however it is possible to play patched ROMs on the original hardware.[15] The destination cartridge could be the original cartridge from which the initial unpatched ROM was pulled (which involves replacing the original ROM chip with a new one), or another compatible cartridge of the same type, such as flash cartridges.  This is particularly popular for fan translations, homebrew games, prototypes, games for which ROM cartridges were never produced, or for games which require exact timing or other elements of the original hardware which are not available in emulators.\n\n"
        },
        {
            "title": "Systems and games",
            "text": "The majority of ROM hacking is done on NES and SNES games (including Sega Mega Drive/Genesis games to an extent), since such games are small and simple compared to games of more advanced consoles such as the Nintendo 64 or Nintendo DS. Games for the Game Boy, Game Boy Color and Game Boy Advance are also popular for hacking, as well as games for the PlayStation to a lesser extent. However, games intended for more recent consoles are not exempt from hacking, and as computers have become faster over time and more programs and utilities have been written, more PlayStation, Nintendo 64 and Nintendo DS hacks have emerged.\n\nOf these, popular games to play are popular games to hack; many hacks have been released of games of the Sonic the Hedgehog series, Super Mario series (including Mario Bros., Super Mario Bros., Super Mario Bros. 2, Super Mario Bros. 3, Super Mario Land, Super Mario Land 2: 6 Golden Coins, Super Mario 64 and Super Mario World), Mario Kart series (most notably Super Mario Kart, Mario Kart Wii, Mario Kart 7, and Mario Kart DS), Pokémon series, Chip's Challenge, Castlevania, Final Fantasy, The Legend of Zelda, games from the Mega Man series, Fire Emblem series, EarthBound, Super Metroid, and many others.\n\nA notable hacked arcade game was Street Fighter II: Rainbow Edition, which featured increased game speed and new special moves. The success of this game prompted Capcom to release Street Fighter II: Hyper Fighting as an official response.\n\nYour Sinclair magazine published a monthly column called \"Program Pitstop\". This focused mainly on cheat hacks for games, but also featured both a level map printer[16] for the original Gauntlet, as well as a full level editor[17] for the same game.\n\n"
        }
    ]
}